{"remainingRequest":"/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/src/views/Register.vue?vue&type=style&index=0&id=63ae9146&scoped=true&lang=css&","dependencies":[{"path":"/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/src/views/Register.vue","mtime":1623228206974},{"path":"/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmJhbm5lci10ZXh0IHsKICBjb2xvcjogcmVkOwp9Ci5yZWdpc3Rlci10ZXh0IHsKICBmb250LXNpemU6IDEuNWVtOwogIGZvbnQtZmFtaWx5OiBWZXJkYW5hLCBHZW5ldmEsIFRhaG9tYSwgc2Fucy1zZXJpZjsKICBjb2xvcjogZ3JleTsKfQouZWwtaW5wdXQgewogIHdpZHRoOiAyMGVtOwp9Ci5lbC1mb3JtLWl0ZW0gewogIG1hcmdpbi10b3A6IDJlbTsKfQouZWwtZm9ybSB7CiAgcGFkZGluZy1ib3R0b206IDFlbTsKfQouZWwtZGl2aWRlciB7CiAgbWFyZ2luOiAwOwogIHBhZGRpbmc6IDA7Cn0K"},{"version":3,"sources":["Register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Register.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <el-row>\n      <!-- 左半部分 -->\n      <el-col :span=\"14\" style=\"margin-top: 4em; text-align: right;\">\n        <div>\n          <div>\n            <el-image :src=\"image.logo\"></el-image>\n          </div>\n          <div>\n            <span class=\"banner-text\">商品美·种类多·欢迎选购</span>\n          </div>\n          <div></div>\n          <el-image :src=\"image.register\"></el-image>\n        </div>\n      </el-col>\n      <!-- 分割线 -->\n      <el-col :span=\"1\" style=\"margin-top: 2em; text-align: center;\">\n        <el-image :src=\"image.interval\"></el-image>\n      </el-col>\n      <!-- 右半部分 -->\n      <el-col :span=\"9\" style=\"width: 22em; margin-top: 4em;\">\n        <div>\n          <!-- 标题栏 -->\n          <el-row style=\"line-height: 3em;\">\n            <el-col :span=\"18\">\n              <span class=\"register-text\">用户注册</span>\n            </el-col>\n            <el-col :span=\"6\" style=\"text-align: right;\">\n              <!-- click事件直接绑定router内置函数完成页面跳转 -->\n              <el-button type=\"text\" @click=\"$router.push({ name: 'login' })\">\n                登陆\n                <i class=\"el-icon-d-arrow-right el-icon--right\"></i>\n              </el-button>\n            </el-col>\n          </el-row>\n          <el-divider></el-divider>\n\n          <!-- 注册表单 -->\n          <el-form size=\"mini\" label-width=\"6em\" :model=\"form\" :rules=\"rules\" ref=\"registerForm\">\n            <el-form-item label=\"用户名:\" prop=\"username\">\n              <el-input v-model=\"form.username\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"密码:\" prop=\"password\">\n              <el-input v-model=\"form.password\" type=\"password\" auto-complete=\"off\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"确认密码:\" prop=\"password2\">\n              <el-input\n                v-model=\"form.password2\"\n                type=\"password\"\n                auto-complete=\"off\"\n                ref=\"password2\"\n              ></el-input>\n            </el-form-item>\n            <el-form-item label=\"手机号:\" prop=\"mobile\">\n              <el-input v-model=\"form.mobile\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"验证码:\" prop=\"sms_code\">\n              <span style=\"width: 20em;\">\n                <el-input style=\"width: 10em; margin-right:1em;\" v-model=\"form.sms_code\"></el-input>\n                <el-button\n                  style=\"width: 8em; text-align: center;\"\n                  @click=\"getSmsCode\"\n                  type=\"primary\"\n                  :disabled=\"send_flag\"\n                >{{ send_tips }}</el-button>\n              </span>\n            </el-form-item>\n            <el-form-item style=\"text-align: left;\" label-width=\"6em\" prop=\"allow\">\n              <el-checkbox v-model=\"form.allow\" true-label=\"true\">同意 “张老师的使用协议”</el-checkbox>\n            </el-form-item>\n            <el-form-item style=\"text-align: center; margin-top: 0px;\" label-width=\"0\">\n              <el-button type=\"danger\" size=\"medium\" style=\"width: 20em;\" @click=\"submit\">立即注册</el-button>\n            </el-form-item>\n          </el-form>\n        </div>\n      </el-col>\n    </el-row>\n    <!-- footer部分 -->\n    <Footer></Footer>\n  </div>\n</template>\n\n<script>\nimport Footer from \"@/components/Footer.vue\";\n\nexport default {\n  name: \"Register\",\n  data() {\n    // 校验两次密码输入是否相同，校验成功时一定要回调callback()。否则会导致全局校验通过后不继续执行\n    const check_pwd = (rule, value, callback) => {\n      if (this.form.password === value) {\n        callback();\n      } else {\n        this.form.password2 = \"\";\n        // 当校验不过时，确认密码框自动获得焦点\n        // this.$refs.password2.focus();\n        callback(new Error(\"两次输入的密码不一致，请重新输入\"));\n      }\n    };\n    const check_username = (rule, value, callback) => {\n      this.$axios\n        .get(\"users/\" + value + \"/count/\")\n        .then(res => {\n          if (res.data.count > 0) {\n            callback(new Error(\"用户名已存在\"));\n          }\n          callback();\n        })\n        .catch(err => {\n          this.$message.error(err.message);\n        });\n    };\n    const check_mobile = (rule, value, callback) => {\n      this.$axios\n        .get(\"users/\" + value + \"/count/\")\n        .then(res => {\n          if (res.data.count > 0) {\n            callback(new Error(\"该手机号已经注册\"));\n          }\n          callback();\n        })\n        .catch(err => {\n          this.$message.error(err.message);\n        });\n    };\n\n    return {\n      // 图片路径。引用本地图片时，将图片作为对象导入才能绑定\n      image: {\n        logo: require(\"../assets/images/logo.png\"),\n        register: require(\"../assets/images/register_banner.png\"),\n        interval: require(\"../assets/images/interval_line.png\")\n      },\n\n      // 发送短信按钮标识及文本\n      send_flag: false,\n      send_tips: \"发送验证码\",\n\n      // 注册表单\n      form: {\n        username: \"\",\n        password: \"\",\n        password2: \"\",\n        mobile: \"\",\n        sms_code: \"\",\n        allow: \"\"\n      },\n\n      // 表单校验规则\n      rules: {\n        username: [\n          {\n            required: true,\n            pattern: /^\\w{5,20}$/,\n            message: \"用户名应由字母数字或下划线组成的5～20位字符\",\n            trigger: \"blur\"\n          },\n          { validator: check_username, trigger: \"blur\" }\n        ],\n        password: [\n          {\n            required: true,\n            pattern: /^\\w{8,20}$/,\n            message: \"密码应由字母数字或下划线组成的8～20位字符\",\n            trigger: \"blur\"\n          }\n        ],\n        password2: [\n          {\n            required: true,\n            message: \"确认密码为必填项\",\n            trigger: \"blur\"\n          },\n          { validator: check_pwd, trigger: \"blur\" }\n        ],\n        mobile: [\n          {\n            required: true,\n            pattern: /^1[3-9]{1}\\d{9}$/,\n            message: \"手机号码不合法\",\n            trigger: \"blur\"\n          },\n          { validator: check_mobile, trigger: \"blur\" }\n        ],\n        sms_code: [\n          {\n            required: true,\n            pattern: /^[0-9]{6}$/,\n            message: \"验证码错误\",\n            trigger: \"blur\"\n          }\n        ],\n        allow: [\n          { required: true, message: \"请勾选使用协议\", trigger: \"change\" }\n        ]\n      }\n    };\n  },\n  mounted() {},\n  methods: {\n    // 获取短信验证码\n    getSmsCode() {\n      let that = this;\n      if (that.form.mobile) {\n        // 判断是否已经发了短信\n        if (that.send_flag) {\n          return;\n        }\n\n        that.$axios\n          .get(\"sms_codes/\" + that.form.mobile, {})\n          .then(res => {\n            if (res.status == 200) {\n              // 短信发送成功后，置灰按钮，倒计时60秒，60秒后允许用户再次点击发送短信验证码的按钮\n              that.send_flag = true;\n              let num = 60;\n              // 设置一个计时器\n              let timer = setInterval(\n                () => {\n                  if (num == 1) {\n                    // 如果计时器到最后, 清除计时器对象\n                    clearInterval(timer);\n                    // 将点击获取验证码的按钮展示的文本回复成原始文本\n                    that.send_tips = \"发送验证码\";\n                    // 将点击按钮的onclick事件函数恢复回去\n                    that.send_flag = false;\n                  } else {\n                    num -= 1;\n                    // 展示倒计时信息\n                    that.send_tips = num + \"秒\";\n                  }\n                },\n                1000,\n                60\n              );\n            } \n          })\n          .catch(err => {\n            that.$message.error(err.message);\n          });\n      } else {\n        that.$message.error(\"请先填写手机号！\");\n      }\n    },\n    // 提交注册表单\n    submit() {\n      this.$refs.registerForm.validate(valid => {\n        if (valid) {\n          let that = this;\n          that.$axios\n            .post(\"users/\", that.form)\n            .then(res => {\n              // 注册成功时，状态码为201\n              if (res.status == 201) {\n                // 注册成功后，保存token信息\n                sessionStorage.clear(); // sessionStorage关闭浏览器即清除\n                localStorage.clear(); // 永久保存\n\n                sessionStorage.token = res.data.token;\n                sessionStorage.username = res.data.username;\n                sessionStorage.user_id = res.data.id;\n\n                this.$store.commit(\"setStatus\", {\n                  username: res.data.username,\n                  token: res.data.token\n                });\n\n                // 跳转页面。根据跳转过来的页面，登陆成功后，跳转回去；否则进入主页\n                that.$router.push({ path: that.$store.state.path });\n              } else {\n                that.$message.error(\"未知错误，请联系管理员\");\n              }\n            })\n            .catch(err => {\n              that.$message.error(\"服务器错误\");\n              that.$message.error(err.message);\n            });\n        }else{\n          return false;\n        }\n      });\n    }\n  },\n  components: {\n    Footer\n  }\n};\n</script>\n\n<style scoped>\n.banner-text {\n  color: red;\n}\n.register-text {\n  font-size: 1.5em;\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  color: grey;\n}\n.el-input {\n  width: 20em;\n}\n.el-form-item {\n  margin-top: 2em;\n}\n.el-form {\n  padding-bottom: 1em;\n}\n.el-divider {\n  margin: 0;\n  padding: 0;\n}\n</style>"]}]}