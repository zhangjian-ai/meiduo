{"remainingRequest":"/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/src/components/Orders.vue?vue&type=style&index=0&id=5177921d&scoped=true&lang=css&","dependencies":[{"path":"/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/src/components/Orders.vue","mtime":1624078308229},{"path":"/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangjian/PycharmProjects/meiduo/meiduo_mall_frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVsLWRpdmlkZXIgewogIG1hcmdpbjogMC41ZW07CiAgbWFyZ2luLWxlZnQ6IDA7CiAgcGFkZGluZzogMC4xZW0gMDsKICBiYWNrZ3JvdW5kLWNvbG9yOiB0b21hdG87Cn0KZGl2IC9kZWVwLy5lbC1pbnB1dF9faW5uZXIgewogIGJvcmRlcjogMnB4IHNvbGlkICNlMjNiM2I7Cn0K"},{"version":3,"sources":["Orders.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Orders.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <el-row>\n      <el-col :span=\"21\">\n        <el-input\n          placeholder=\"输入订单号查询订单\"\n          size=\"mini\"\n          style=\"width: 25em;\"\n          v-model=\"order_id\"\n          onkeyup=\"value = value.replace(/[^\\d]/g,'');\"\n        >\n          <el-button slot=\"append\" icon=\"el-icon-search\" @click=\"query_order()\"></el-button>\n        </el-input>\n      </el-col>\n      <el-col :span=\"3\" style=\"color: grey;\">\n        <span v-if=\"loading\">\n          <i class=\"el-icon-loading\" slot=\"suffix\"></i>加载中...\n        </span>\n      </el-col>\n    </el-row>\n    <el-divider></el-divider>\n    <div style=\"height: 29em; width: 51em;\">\n      <el-row>\n        <el-table\n          :data=\"orders\"\n          height=\"39em\"\n          ref=\"table\"\n          size=\"mini\"\n          :header-cell-style=\"{background:'#eef1f6',color:'#606266', 'text-align': 'center'}\"\n          style=\"overflow-anchor:none;\"\n        >\n          <el-table-column type=\"expand\">\n            <template slot-scope=\"props\">\n              <el-table\n                :data=\"props.row.skus\"\n                size=\"mini\"\n                :header-cell-style=\"{background:'#eef1f6',color:'#606266', 'text-align': 'center'}\"\n              >\n                <el-table-column align=\"center\" width=\"90\">\n                  <template slot-scope=\"scope\">\n                    <el-image\n                      :src=\"scope.row.sku.default_image_url\"\n                      style=\"width: 5em; height: 5em;\"\n                    ></el-image>\n                  </template>\n                </el-table-column>\n                <el-table-column label=\"商品名称\" width=\"250\">\n                  <template slot-scope=\"scope\">{{ scope.row.sku.name }}</template>\n                </el-table-column>\n                <el-table-column align=\"center\" label=\"规格\" prop=\"spec\" width=\"120\"></el-table-column>\n                <el-table-column align=\"center\" label=\"数量\" prop=\"count\" width=\"80\"></el-table-column>\n                <el-table-column align=\"center\" label=\"价格\" prop=\"price\" width=\"100\"></el-table-column>\n                <el-table-column align=\"center\" label=\"历史评分\" prop=\"score\" width=\"80\"></el-table-column>\n              </el-table>\n            </template>\n          </el-table-column>\n          <el-table-column align=\"center\" label=\"序号\" width=\"80\" type=\"index\"></el-table-column>\n          <el-table-column align=\"center\" label=\"订单号\" prop=\"order_id\" width=\"160\"></el-table-column>\n          <el-table-column align=\"center\" label=\"数量\" prop=\"total_count\" width=\"80\"></el-table-column>\n          <el-table-column align=\"center\" label=\"总金额\" prop=\"total_amount\" width=\"120\"></el-table-column>\n          <el-table-column align=\"center\" label=\"订单运费\" prop=\"freight\" width=\"120\"></el-table-column>\n          <el-table-column align=\"center\" label=\"订单状态\" prop=\"status_text\" width=\"85\"></el-table-column>\n          <el-table-column align=\"center\" label=\"操作\" width=\"120\">\n            <template slot-scope=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"mini\"\n                v-if=\"scope.row.status == 1\"\n                @click=\"pay_order(scope.row.order_id)\"\n              >去支付</el-button>\n              <el-button type=\"primary\" size=\"mini\" v-if=\"scope.row.status == 2\">去催单</el-button>\n              <el-button type=\"primary\" size=\"mini\" v-if=\"scope.row.status == 3\">确认收货</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </el-row>\n    </div>\n  </div>\n</template>\n<script>\n/* eslint-disable */\nexport default {\n  name: \"Orders\",\n  data() {\n    return {\n      // 订单\n      orders: [],\n\n      // 分页及排序\n      page: 1,\n      page_size: 10,\n      total_page: 0,\n\n      // 加载过渡状态\n      loading: false,\n\n      // 防止过渡加载变量\n      load: true,\n\n      // 订单号\n      order_id: \"\"\n    };\n  },\n  mounted() {\n    if (this.$route.params.id) {\n      // 判断一下再赋值，防止被赋undefined\n      this.order_id = this.$route.params.id;\n    }\n    this.query_order();\n  },\n  methods: {\n    // 获取订单列表\n    get_orders() {\n      this.$api\n        .orders({\n          page: this.page,\n          page_size: this.page_size\n        })\n        .then(res => {\n          this.orders = res.data.results;\n          //   向上取整拿到总页数\n          this.total_page = Math.ceil(res.data.count / this.page_size);\n\n          // scrollHeight: 元素的高度即表格内容的高度\n          // scrollTop: 元素滚动出去的高度\n          // clientHeight: 元素可视区域的高度\n          // 当scrollTop + clientHeight = scrollHeight 时,滚动条滚动到底部\n          // 监听表格dom对象的滚动事件\n          //   let dom = document.querySelector('.el-table__body');\n          let dom = this.$refs.table.bodyWrapper;\n          let that = this;\n          dom.addEventListener(\"scroll\", function() {\n            const scrollDistance =\n              dom.scrollHeight - dom.scrollTop - dom.clientHeight;\n            // 增加一个判断条件，避免查询单条时触发\n            if (scrollDistance <= 0 && that.load) {\n              //等于0证明已经到底，可以请求接口\n              if (that.page < that.total_page) {\n                //当前页数小于总页数就请求\n                that.page++; //当前页数自增\n                that.loading = true; // 展示加载中过渡状态\n                that.load = false;\n                //请求接口的代码\n                that.$api\n                  .orders({\n                    page: that.page,\n                    page_size: that.page_size\n                  })\n                  .then(res => {\n                    //将请求回来的数据和当前展示的数据合并在一起\n                    that.orders = that.orders.concat(res.data.results);\n                    that.loading = false;\n                    that.load = true;\n                  })\n                  .catch(() => {\n                    that.loading = false;\n                    that.load = true;\n                  });\n              }\n            }\n          });\n        });\n    },\n\n    // 查询单条订单\n    get_order(order_id) {\n      this.loading = true; // 展示加载中过渡状态\n      this.load = false;\n      this.$api\n        .order(order_id)\n        .then(res => {\n          // 将查询的单条数据push到列表\n          this.orders.push(res.data);\n          this.loading = false;\n          this.load = true;\n        })\n        .catch(() => {\n          this.loading = false;\n          this.load = true;\n        });\n    },\n\n    // 查询订单\n    query_order() {\n      this.orders = []; // 搜索之前都先清空列表\n      this.page = 1; // 重置page为第一页\n      if (this.order_id) {\n        this.get_order(this.order_id);\n      } else {\n        this.get_orders();\n      }\n    },\n\n    // 立即支付\n    pay_order(order_id) {\n      this.$api.payment_url(order_id).then(res => {\n        window.open(res.data.url);\n        // location.href = res.data.url;\n      });\n    }\n  }\n};\n</script>\n<style scoped >\n.el-divider {\n  margin: 0.5em;\n  margin-left: 0;\n  padding: 0.1em 0;\n  background-color: tomato;\n}\ndiv /deep/.el-input__inner {\n  border: 2px solid #e23b3b;\n}\n</style>"]}]}